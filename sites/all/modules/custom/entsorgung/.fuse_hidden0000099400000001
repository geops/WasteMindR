<?php

/**
 * Implements hook_menu().
 */
function entsorgung_menu() {
  $items['entsorgung/%/%'] = array(
    'page callback' => 'entsorgung_filter_view',
    'page arguments' => array(1, 2),
    // TODO!! THERE IS NO PRIVILEGE CHECKING AT THE MOMENT
    'access callback'   => true
  );
  return $items;
}

/**
 * Implements a views-based rest API for messtisch
 *
 * if a nid is provided, output a single node from the messtisch view
 * if no nid is provded, output every row
 * (paging is possible)
 */
function entsorgung_filter_view($display, $lat, $lon) {

  $view = views_get_view('events');

  $view->set_display($display);

  $location = "POINT($lon $lat)";
  $filters = $view->get_items('filter', $view->current_display);
  $filters['field_geometry_geometry']['value']['wkt'] = $location;
  $view->set_item($view->current_display, 'filter', 'field_geometry_geometry', $filters['field_geometry_geometry']);

  $view->pre_execute();

  if ($display === 'json') {

    $return = array('events' => array());
    $view->execute();

    if (count($view->result) > 0) {
      foreach ($view->result as $result) {
        $return['events'][] = array(
          'type' => $result->field_field_type[0]['rendered']['#markup'],
          'date' => $result->field_field_date[0]['rendered']['#markup'],
        );
      }

      $return['location'] = array(
        'geometry' => $view->result[0]->field_field_geometry[0]['rendered']['#markup'],
        'name' => $view->result[0]->node_field_data_field_location_title,
      );
    }

    drupal_json_output($return);

  } else {
    return $view->render($display);
  }
}

/**
 * Implementation of hook_cron() 
 */ 
function entsorgung_init() {

  $query = db_select('users', 'u')
    ->fields('u');
    //->join('field_data_field_reminder','r','r.entity_id = u.uid');
    /*
                ->condition('ur.rid', array(2,4,),'IN') // set to an array of roles and pass. In this case I knew ahead of time what rids I wanted to filter by.
                ->groupBy('u.uid');
    $query->innerJoin('users_roles', 'ur', 'u.uid = ur.uid');*/
    $results = $query->execute();
    //dpm($results);
    while($record = $results->fetchAssoc()) {
        //dpm($record);
    }


  if (time() >= variable_get('entsorgung_reminder', 0)) {



    variable_set('entsorgung_reminder', time() + 0); // 86400);
  }

}

/**
 * Implements hook_ctools_plugin_api().
 *
 */
function entsorgung_ctools_plugin_api($module, $api) {
  if ($module == 'openlayers') {
    switch ($api) {
      case 'behaviors':
        return array('version' => 1);
    }
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function entsorgung_ctools_plugin_directory($module, $plugin) {
  if ($module == 'openlayers' && $plugin == 'behaviors') {
    return 'plugins/openlayers/behaviors';
  }
}