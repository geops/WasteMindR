diff --git a/plugins/layer_types/openlayers_layer_type_wmts.inc b/plugins/layer_types/openlayers_layer_type_wmts.inc
index 6410720..1800a05 100644
--- a/plugins/layer_types/openlayers_layer_type_wmts.inc
+++ b/plugins/layer_types/openlayers_layer_type_wmts.inc
@@ -54,6 +54,19 @@ class openlayers_layer_type_wmts extends openlayers_layer_type {
         '#default_value' => isset($this->data['matrixSet']) ? $this->data['matrixSet'] : '',
         '#description' => t('One of the advertised matrix set identifiers. Must be provided.'),
       ),
+      'matrixIds' => array(
+        '#type' => 'textfield',
+        '#title' => t('Matrix IDs'),
+        '#default_value' => isset($this->data['matrixIds']) ? implode(',', $this->data['matrixIds']) : '',
+        '#description' => t('Matrix identifiers per zoom level. Comma separated. Leave empty to use zoom level as identifier.'),
+      ),
+      'matrixIdsAuto' => array(
+        '#type' => 'checkbox',
+        '#default_value' => isset($this->data['matrixIdsAuto']) ?
+          $this->data['matrixIdsAuto'] : FALSE,
+        '#title' => t('Auto-generate matrix identifiers.'),
+        '#description' => t('Generate identifiers in the format [matrixSet]:[zoomLevel]. Use this options for Geoserver WMTS tiles. Overwrites explicit matrix IDs specified above.')
+      ),
       'format' => array(
         '#type' => 'select',
         '#title' => t('Tile format'),
@@ -104,6 +117,11 @@ class openlayers_layer_type_wmts extends openlayers_layer_type {
     //parent::options_form_validate($form, $form_state);
     $form_state['data']['resolutions'] = array_map('floatval', explode(' ', $form_state['data']['resolutions']));
     $form_state['data']['serverResolutions'] = array_map('floatval', explode(' ', $form_state['data']['serverResolutions']));
+    if (empty($form_state['data']['matrixIds'])) {
+      $form_state['data']['matrixIds'] = NULL;
+    } else {
+      $form_state['data']['matrixIds'] = explode(',', $form_state['data']['matrixIds']);
+    }
     $form_state['data']['url'] = explode("\n", $form_state['data']['url']);
     $form_state['data']['maxExtent'] = array_map('floatval', explode(",", $form_state['data']['maxExtent']));
     if (empty($form_state['data']['formatSuffix'])) {
diff --git a/plugins/layer_types/openlayers_layer_type_wmts.js b/plugins/layer_types/openlayers_layer_type_wmts.js
index 87b2c5a..687f269 100644
--- a/plugins/layer_types/openlayers_layer_type_wmts.js
+++ b/plugins/layer_types/openlayers_layer_type_wmts.js
@@ -9,11 +9,6 @@
  */
 Drupal.openlayers.layer.wmts = function(title, map, options) {
 
-  var matrixIds = new Array(26);
-  for (var i=0; i<26; ++i) {
-    matrixIds[i] = options.matrixSet + ":" + i;
-  }
-
   var layer_options = {
     drupalID: options.drupalID,
     name: title,
@@ -23,11 +18,20 @@ Drupal.openlayers.layer.wmts = function(title, map, options) {
     url: options.url,
     style: options.style,
     matrixSet: options.matrixSet,
-    matrixIds: matrixIds,
     format: options.format,
     formatSuffix: options.formatSuffix,
     isBaseLayer: options.isBaseLayer
   };
+
+  if (options.matrixIdsAuto) {
+    layer_options.matrixIds = new Array(26);
+    for (var i=0; i<26; ++i) {
+      layer_options.matrixIds[i] = options.matrixSet + ":" + i;
+    }
+  } else if (options.matrixIds) {
+    layer_options.matrixIds = options.matrixIds;
+  }
+
   if (OpenLayers.Util.isArray(options.maxExtent)) {
     layer_options.maxExtent = OpenLayers.Bounds.fromArray(options.maxExtent);
   }
